// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Database;

namespace OnlineShop.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230317142445_DeleteProductImage")]
    partial class DeleteProductImage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineShop.Database.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.CompareProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CompareProducts");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.FavoriteProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDatetime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryInfoId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.OrderDeliveryInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Agree")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderDeliveryInfo");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a5cf474-c473-48e1-bc3e-bbe0f22a80f2"),
                            Cost = 35000000m,
                            CreationDateTime = new DateTime(2023, 3, 17, 17, 24, 44, 262, DateTimeKind.Local).AddTicks(3433),
                            Description = "super",
                            Name = "Ferrari"
                        },
                        new
                        {
                            Id = new Guid("e6d46e32-765c-487d-bf57-78759b32a47c"),
                            Cost = 25000000m,
                            CreationDateTime = new DateTime(2023, 3, 17, 17, 24, 44, 263, DateTimeKind.Local).AddTicks(7497),
                            Description = "best",
                            Name = "Lambo"
                        },
                        new
                        {
                            Id = new Guid("59d7a46d-79a2-4a09-b6ad-a2333c3d3dcc"),
                            Cost = 5000000m,
                            CreationDateTime = new DateTime(2023, 3, 17, 17, 24, 44, 263, DateTimeKind.Local).AddTicks(7543),
                            Description = "good",
                            Name = "Camaro"
                        },
                        new
                        {
                            Id = new Guid("b41fefb9-1c66-4f2a-86af-090ada282060"),
                            Cost = 7000000m,
                            CreationDateTime = new DateTime(2023, 3, 17, 17, 24, 44, 263, DateTimeKind.Local).AddTicks(7551),
                            Description = "good",
                            Name = "Mustang"
                        },
                        new
                        {
                            Id = new Guid("36211d90-17e0-42d0-9f3b-3b17d2885ec1"),
                            Cost = 7000m,
                            CreationDateTime = new DateTime(2023, 3, 17, 17, 24, 44, 263, DateTimeKind.Local).AddTicks(7557),
                            Description = "not bad",
                            Name = "Volga"
                        },
                        new
                        {
                            Id = new Guid("968bfe01-31ba-44c0-a7c8-d1d04c1ffeb5"),
                            Cost = 700m,
                            CreationDateTime = new DateTime(2023, 3, 17, 17, 24, 44, 263, DateTimeKind.Local).AddTicks(7569),
                            Description = "foo",
                            Name = "Kopeyka"
                        });
                });

            modelBuilder.Entity("OnlineShop.Database.Models.CartItem", b =>
                {
                    b.HasOne("OnlineShop.Database.Models.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("OnlineShop.Database.Models.Order", null)
                        .WithMany("CartItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineShop.Database.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.CompareProduct", b =>
                {
                    b.HasOne("OnlineShop.Database.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.FavoriteProduct", b =>
                {
                    b.HasOne("OnlineShop.Database.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.Image", b =>
                {
                    b.HasOne("OnlineShop.Database.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.Order", b =>
                {
                    b.HasOne("OnlineShop.Database.Models.OrderDeliveryInfo", "DeliveryInfo")
                        .WithMany()
                        .HasForeignKey("DeliveryInfoId");

                    b.Navigation("DeliveryInfo");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.Order", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OnlineShop.Database.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
